2020/05/26 20:01:41 原始请求： GET /weibo/index HTTP/1.1
Host: localhost:2000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:41 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:41 path and query: /weibo/index {} 
2020/05/26 20:01:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>


    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>

    <!--
    
    -->
    <script src='/static?file=js/api.js'></script>
    <script src='/static?file=js/weibo.js'></script>
</body>
</html>
2020/05/26 20:01:41 原始请求： GET /static?file=js/api.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:41 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:41 path and query: /static {'file': 'js/api.js'} 
2020/05/26 20:01:41 响应
 HTTP/1.1 200 OK

let log = function() {
    console.log.apply(console, arguments)
}

let e = function(sel) {
    // 选择器封装
    return document.querySelector(sel)
}

/*
 [------- ajax 函数 套路 -------]
*/
let ajax = function(method, path, data, responseCallback) {
    let r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// ------- TODO API -------
// 获取所有 todo
let apiTodoAll = function(callback) {
    let path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
let apiTodoAdd = function(form, callback) {
    let path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
let apiTodoDelete = function(id, callback) {
    let path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    // 可以进一步封装 get 请求
    // get(path, callback)
}

// 更新一个 todo
let apiTodoUpdate = function(form, callback) {
    let path = '/api/todo/update'
    ajax('POST', path, form, callback)
    // 可以进一步封装 post 请求
    // post(path, form, callback)
}

// ------- weibo api -------
// load weibo all
let apiWeiboAll = function(callback) {
    let path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
let apiWeiboAdd = function(form, callback) {
    let path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

2020/05/26 20:01:41 原始请求： GET /static?file=js/weibo.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:41 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:41 path and query: /static {'file': 'js/weibo.js'} 
2020/05/26 20:01:41 响应
 HTTP/1.1 200 OK

let timeString = function(timestamp) {
    let t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

let commentsTemplate = function(comments) {
    let html = ''
    for(let i = 0; i < comments.length; i++) {
        let c = comments[i]
        let t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

let weiboTemplate = function(weibo) {
    let content = weibo.content
    let id = weibo.id
    // let ut = timeString(weibo.ut)
    let comments = commentsTemplate(weibo.comments)
    const t = `
        <div class="weibo-cell" id='weibo-${id}' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div>
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除</button>
            <span class='weibo-title'>${title}</span>
            <time class='weibo-ut'>${ut}</time>
        </div>
    `
    return t
}

// 接收一个 weibo 参数
// 将其添加到 weibo-list 元素的最后位置
let insertWeibo = function(weibo) {
    let weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    let weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

// 插入一个编辑元素
let insertEditForm = function(cell) {
    let form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

let loadWeibos = function() {
    apiWeiboAll(function(r) {
        let weibos = JSON.parse(r)
        for(let i = 0; i < weibos.length; i++) {
            let weibo = weibos[i]
            insertWeibo(weibo)
        }
    })
}

// 为 todo add button 添加事件
let bindEventTodoAdd = function() {
    let b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        let input = e('#id-input-todo')
        let title = input.value
        log('click add', title)
        const form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            let todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

let bindEventTodoDelete = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        // 获得被点击的元素
        let self = event.target
        if(self.classList.contains('todo-delete')){
            // [套路] 删除这个 todo
            let todoCell = self.parentElement
            const todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

let bindEventTodoEdit = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            let todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

let bindEventTodoUpdate = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            // 找到父节点 edit 元素
            let editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            let input = editForm.querySelector('.todo-edit-input')
            let title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            let todoCell = self.closest('.todo-cell')
            let todo_id = todoCell.dataset.id
            let form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                let todo = JSON.parse(r)
                let selector = '#todo-' + todo.id
                let todoCell = e(selector)
                let titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
                // TODO: 更新时间
                editForm.remove()
            })
        }
    })
}

let bindEvents = function() {
    // bindEventTodoAdd()
    // bindEventTodoDelete()
    // bindEventTodoEdit()
    // bindEventTodoUpdate()
}

let __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

2020/05/26 20:01:42 原始请求： GET /api/weibo/all HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:42 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:42 path and query: /api/weibo/all {} 
2020/05/26 20:01:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "weibo1改",
    "user_id": 1,
    "ct": 1590516102,
    "ut": 1590516102,
    "comments": [
      {
        "id": 1,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "评论2",
        "user_id": 1,
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 3,
    "content": "weibo3",
    "user_id": 1,
    "ct": 1590516102,
    "ut": 1590516102,
    "comments": [
      {
        "id": 3,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 3
      }
    ]
  }
]
2020/05/26 20:01:50 start at :2000
2020/05/26 20:01:55 原始请求： GET /weibo/index HTTP/1.1
Host: localhost:2000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:55 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:55 path and query: /weibo/index {} 
2020/05/26 20:01:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>


    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>

    <!--
    
    -->
    <script src='/static?file=js/api.js'></script>
    <script src='/static?file=js/weibo.js'></script>
</body>
</html>
2020/05/26 20:01:55 原始请求： GET /static?file=js/api.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:55 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:55 path and query: /static {'file': 'js/api.js'} 
2020/05/26 20:01:55 响应
 HTTP/1.1 200 OK

let log = function() {
    console.log.apply(console, arguments)
}

let e = function(sel) {
    // 选择器封装
    return document.querySelector(sel)
}

/*
 [------- ajax 函数 套路 -------]
*/
let ajax = function(method, path, data, responseCallback) {
    let r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// ------- TODO API -------
// 获取所有 todo
let apiTodoAll = function(callback) {
    let path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
let apiTodoAdd = function(form, callback) {
    let path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
let apiTodoDelete = function(id, callback) {
    let path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    // 可以进一步封装 get 请求
    // get(path, callback)
}

// 更新一个 todo
let apiTodoUpdate = function(form, callback) {
    let path = '/api/todo/update'
    ajax('POST', path, form, callback)
    // 可以进一步封装 post 请求
    // post(path, form, callback)
}

// ------- weibo api -------
// load weibo all
let apiWeiboAll = function(callback) {
    let path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
let apiWeiboAdd = function(form, callback) {
    let path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

2020/05/26 20:01:55 原始请求： GET /static?file=js/weibo.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:55 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:55 path and query: /static {'file': 'js/weibo.js'} 
2020/05/26 20:01:55 响应
 HTTP/1.1 200 OK

let timeString = function(timestamp) {
    let t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

let commentsTemplate = function(comments) {
    let html = ''
    for(let i = 0; i < comments.length; i++) {
        let c = comments[i]
        let t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

let weiboTemplate = function(weibo) {
    let content = weibo.content
    let id = weibo.id
    // let ut = timeString(weibo.ut)
    let comments = commentsTemplate(weibo.comments)
    const t = `
        <div class="weibo-cell" id='weibo-${id}' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div>
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除</button>
            <span class='weibo-title'>${title}</span>
            <time class='weibo-ut'>${ut}</time>
        </div>
    `
    return t
}

// 接收一个 weibo 参数
// 将其添加到 weibo-list 元素的最后位置
let insertWeibo = function(weibo) {
    let weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    let weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

// 插入一个编辑元素
let insertEditForm = function(cell) {
    let form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

let loadWeibos = function() {
    apiWeiboAll(function(r) {
        let weibos = JSON.parse(r)
        for(let i = 0; i < weibos.length; i++) {
            let weibo = weibos[i]
            insertWeibo(weibo)
        }
    })
}

// 为 todo add button 添加事件
let bindEventTodoAdd = function() {
    let b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        let input = e('#id-input-todo')
        let title = input.value
        log('click add', title)
        const form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            let todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

let bindEventTodoDelete = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        // 获得被点击的元素
        let self = event.target
        if(self.classList.contains('todo-delete')){
            // [套路] 删除这个 todo
            let todoCell = self.parentElement
            const todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

let bindEventTodoEdit = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            let todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

let bindEventTodoUpdate = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            // 找到父节点 edit 元素
            let editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            let input = editForm.querySelector('.todo-edit-input')
            let title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            let todoCell = self.closest('.todo-cell')
            let todo_id = todoCell.dataset.id
            let form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                let todo = JSON.parse(r)
                let selector = '#todo-' + todo.id
                let todoCell = e(selector)
                let titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
                // TODO: 更新时间
                editForm.remove()
            })
        }
    })
}

let bindEvents = function() {
    // bindEventTodoAdd()
    // bindEventTodoDelete()
    // bindEventTodoEdit()
    // bindEventTodoUpdate()
}

let __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

2020/05/26 20:01:55 原始请求： GET /api/weibo/all HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:01:55 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:01:55 path and query: /api/weibo/all {} 
2020/05/26 20:01:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "weibo1改",
    "user_id": 1,
    "ct": 1590516115,
    "ut": 1590516115,
    "comments": [
      {
        "id": 1,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "评论2",
        "user_id": 1,
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 3,
    "content": "weibo3",
    "user_id": 1,
    "ct": 1590516115,
    "ut": 1590516115,
    "comments": [
      {
        "id": 3,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 3
      }
    ]
  }
]
2020/05/26 20:02:23 start at :2000
2020/05/26 20:02:24 原始请求： GET /weibo/index HTTP/1.1
Host: localhost:2000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:24 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:24 path and query: /weibo/index {} 
2020/05/26 20:02:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>


    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>

    <!--
    
    -->
    <script src='/static?file=js/api.js'></script>
    <script src='/static?file=js/weibo.js'></script>
</body>
</html>
2020/05/26 20:02:24 原始请求： GET /static?file=js/api.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:24 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:24 path and query: /static {'file': 'js/api.js'} 
2020/05/26 20:02:24 响应
 HTTP/1.1 200 OK

let log = function() {
    console.log.apply(console, arguments)
}

let e = function(sel) {
    // 选择器封装
    return document.querySelector(sel)
}

/*
 [------- ajax 函数 套路 -------]
*/
let ajax = function(method, path, data, responseCallback) {
    let r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// ------- TODO API -------
// 获取所有 todo
let apiTodoAll = function(callback) {
    let path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
let apiTodoAdd = function(form, callback) {
    let path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
let apiTodoDelete = function(id, callback) {
    let path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    // 可以进一步封装 get 请求
    // get(path, callback)
}

// 更新一个 todo
let apiTodoUpdate = function(form, callback) {
    let path = '/api/todo/update'
    ajax('POST', path, form, callback)
    // 可以进一步封装 post 请求
    // post(path, form, callback)
}

// ------- weibo api -------
// load weibo all
let apiWeiboAll = function(callback) {
    let path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
let apiWeiboAdd = function(form, callback) {
    let path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

2020/05/26 20:02:24 原始请求： GET /static?file=js/weibo.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:24 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:24 path and query: /static {'file': 'js/weibo.js'} 
2020/05/26 20:02:24 响应
 HTTP/1.1 200 OK

let timeString = function(timestamp) {
    let t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

let commentsTemplate = function(comments) {
    let html = ''
    for(let i = 0; i < comments.length; i++) {
        let c = comments[i]
        let t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

let weiboTemplate = function(weibo) {
    let content = weibo.content
    let id = weibo.id
    // let ut = timeString(weibo.ut)
    let comments = commentsTemplate(weibo.comments)
    const t = `
        <div class="weibo-cell" id='weibo-${id}' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div>
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除</button>
            <span class='weibo-content'>${content}</span>
            <time class='weibo-ut'>${ut}</time>
        </div>
    `
    return t
}

// 接收一个 weibo 参数
// 将其添加到 weibo-list 元素的最后位置
let insertWeibo = function(weibo) {
    let weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    let weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

// 插入一个编辑元素
let insertEditForm = function(cell) {
    let form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

let loadWeibos = function() {
    apiWeiboAll(function(r) {
        let weibos = JSON.parse(r)
        for(let i = 0; i < weibos.length; i++) {
            let weibo = weibos[i]
            insertWeibo(weibo)
        }
    })
}

// 为 todo add button 添加事件
let bindEventTodoAdd = function() {
    let b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        let input = e('#id-input-todo')
        let title = input.value
        log('click add', title)
        const form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            let todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

let bindEventTodoDelete = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        // 获得被点击的元素
        let self = event.target
        if(self.classList.contains('todo-delete')){
            // [套路] 删除这个 todo
            let todoCell = self.parentElement
            const todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

let bindEventTodoEdit = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            let todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

let bindEventTodoUpdate = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            // 找到父节点 edit 元素
            let editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            let input = editForm.querySelector('.todo-edit-input')
            let title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            let todoCell = self.closest('.todo-cell')
            let todo_id = todoCell.dataset.id
            let form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                let todo = JSON.parse(r)
                let selector = '#todo-' + todo.id
                let todoCell = e(selector)
                let titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
                // TODO: 更新时间
                editForm.remove()
            })
        }
    })
}

let bindEvents = function() {
    // bindEventTodoAdd()
    // bindEventTodoDelete()
    // bindEventTodoEdit()
    // bindEventTodoUpdate()
}

let __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

2020/05/26 20:02:25 原始请求： GET /api/weibo/all HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:25 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:25 path and query: /api/weibo/all {} 
2020/05/26 20:02:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "weibo1改",
    "user_id": 1,
    "ct": 1590516145,
    "ut": 1590516145,
    "comments": [
      {
        "id": 1,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "评论2",
        "user_id": 1,
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 3,
    "content": "weibo3",
    "user_id": 1,
    "ct": 1590516145,
    "ut": 1590516145,
    "comments": [
      {
        "id": 3,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 3
      }
    ]
  }
]
2020/05/26 20:02:36 start at :2000
2020/05/26 20:02:37 原始请求： GET /weibo/index HTTP/1.1
Host: localhost:2000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:37 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:37 path and query: /weibo/index {} 
2020/05/26 20:02:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>


    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>

    <!--
    
    -->
    <script src='/static?file=js/api.js'></script>
    <script src='/static?file=js/weibo.js'></script>
</body>
</html>
2020/05/26 20:02:37 原始请求： GET /static?file=js/api.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:37 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:37 path and query: /static {'file': 'js/api.js'} 
2020/05/26 20:02:37 响应
 HTTP/1.1 200 OK

let log = function() {
    console.log.apply(console, arguments)
}

let e = function(sel) {
    // 选择器封装
    return document.querySelector(sel)
}

/*
 [------- ajax 函数 套路 -------]
*/
let ajax = function(method, path, data, responseCallback) {
    let r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// ------- TODO API -------
// 获取所有 todo
let apiTodoAll = function(callback) {
    let path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
let apiTodoAdd = function(form, callback) {
    let path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
let apiTodoDelete = function(id, callback) {
    let path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    // 可以进一步封装 get 请求
    // get(path, callback)
}

// 更新一个 todo
let apiTodoUpdate = function(form, callback) {
    let path = '/api/todo/update'
    ajax('POST', path, form, callback)
    // 可以进一步封装 post 请求
    // post(path, form, callback)
}

// ------- weibo api -------
// load weibo all
let apiWeiboAll = function(callback) {
    let path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
let apiWeiboAdd = function(form, callback) {
    let path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

2020/05/26 20:02:37 原始请求： GET /static?file=js/weibo.js HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: no-cors
Sec-Fetch-Dest: script
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:37 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:37 path and query: /static {'file': 'js/weibo.js'} 
2020/05/26 20:02:37 响应
 HTTP/1.1 200 OK

let timeString = function(timestamp) {
    let t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

let commentsTemplate = function(comments) {
    let html = ''
    for(let i = 0; i < comments.length; i++) {
        let c = comments[i]
        let t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

let weiboTemplate = function(weibo) {
    let content = weibo.content
    let id = weibo.id
    // let ut = timeString(weibo.ut)
    let comments = commentsTemplate(weibo.comments)
    const t = `
        <div class="weibo-cell" id='weibo-${id}' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div>
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除</button>
            <span class='weibo-content'>${content}</span>
        </div>
    `
    return t
}

// 接收一个 weibo 参数
// 将其添加到 weibo-list 元素的最后位置
let insertWeibo = function(weibo) {
    let weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    let weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

// 插入一个编辑元素
let insertEditForm = function(cell) {
    let form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

let loadWeibos = function() {
    apiWeiboAll(function(r) {
        let weibos = JSON.parse(r)
        for(let i = 0; i < weibos.length; i++) {
            let weibo = weibos[i]
            insertWeibo(weibo)
        }
    })
}

// 为 todo add button 添加事件
let bindEventTodoAdd = function() {
    let b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        let input = e('#id-input-todo')
        let title = input.value
        log('click add', title)
        const form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            let todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

let bindEventTodoDelete = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        // 获得被点击的元素
        let self = event.target
        if(self.classList.contains('todo-delete')){
            // [套路] 删除这个 todo
            let todoCell = self.parentElement
            const todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

let bindEventTodoEdit = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            let todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

let bindEventTodoUpdate = function() {
    let todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        let self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            // 找到父节点 edit 元素
            let editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            let input = editForm.querySelector('.todo-edit-input')
            let title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            let todoCell = self.closest('.todo-cell')
            let todo_id = todoCell.dataset.id
            let form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                let todo = JSON.parse(r)
                let selector = '#todo-' + todo.id
                let todoCell = e(selector)
                let titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
                // TODO: 更新时间
                editForm.remove()
            })
        }
    })
}

let bindEvents = function() {
    // bindEventTodoAdd()
    // bindEventTodoDelete()
    // bindEventTodoEdit()
    // bindEventTodoUpdate()
}

let __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

2020/05/26 20:02:38 原始请求： GET /api/weibo/all HTTP/1.1
Host: localhost:2000
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
Content-Type: application/json
Accept: */*
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: http://localhost:2000/weibo/index
Accept-Encoding: gzip, deflate, br
Accept-Language: en,zh-CN;q=0.9,zh;q=0.8,zh-TW;q=0.7,ca;q=0.6,nl;q=0.5,es;q=0.4,ja;q=0.3,ru;q=0.2,ko;q=0.1,fr;q=0.1,hr;q=0.1
Cookie: _xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859; username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"; JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E; Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff; session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE; __wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343; user=k_ujy~17v.$dkhvz


2020/05/26 20:02:38 cookie: ['_xsrf=2|1d54b962|bdf2e3b02788db10f988d9c6be27e94c|1583855859', 'username-localhost-8888="2|1:0|10:1588516597|23:username-localhost-8888|44:YjliNDBmNTQ0ODMxNDdmZDhmOTdjNTllZDBjOWIzYzU=|81dc6f52ab64e8835cd247433e9ff5944487624ad08197005e6b328c9d7effdc"', 'JSESSIONID=2CDAD9E7A70C1514842967AA7ECB930E', 'Pycharm-93d91720=2b38548c-9dae-4328-afd0-b666a4ab54ff', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.XskYkA.yQ3VETCba30QcQZrScyYvKomQnE', '__wzd3ddd19b81ba73c7b92e2=1590313314|9d71890bb343', 'user=k_ujy~17v.$dkhvz']
2020/05/26 20:02:38 path and query: /api/weibo/all {} 
2020/05/26 20:02:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "weibo1改",
    "user_id": 1,
    "ct": 1590516158,
    "ut": 1590516158,
    "comments": [
      {
        "id": 1,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "评论2",
        "user_id": 1,
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 3,
    "content": "weibo3",
    "user_id": 1,
    "ct": 1590516158,
    "ut": 1590516158,
    "comments": [
      {
        "id": 3,
        "content": "评论1",
        "user_id": 1,
        "weibo_id": 3
      }
    ]
  }
]
